#!/usr/bin/env node

/**
 * Script para testar configura√ß√µes de mem√≥ria
 * Execute: node scripts/test-memory.js
 */

const MemoryMonitor = require('../src/utils/MemoryMonitor');

console.log('üß™ Testando configura√ß√µes de mem√≥ria...\n');

// Verificar se o garbage collector est√° dispon√≠vel
const gc = global.gc;
if (gc) {
  console.log('‚úÖ Garbage collector habilitado');
} else {
  console.warn('‚ö†Ô∏è  Garbage collector n√£o est√° dispon√≠vel');
  console.log('üí° Execute com: node --max-old-space-size=8192 --expose-gc scripts/test-memory.js');
}

// Iniciar monitor de mem√≥ria
const memoryMonitor = new MemoryMonitor();

console.log('\nüìä Status inicial da mem√≥ria:');
memoryMonitor.logMemoryUsage();

// Simular uso de mem√≥ria
console.log('\nüîß Simulando uso de mem√≥ria...');
const largeArray = [];
for (let i = 0; i < 1000000; i++) {
  largeArray.push({
    id: i,
    data: `Dados de teste ${i}`,
    timestamp: Date.now(),
    metadata: {
      source: 'test',
      version: '1.0',
      category: 'memory-test'
    }
  });
}

console.log('üìä Mem√≥ria ap√≥s criar array grande:');
memoryMonitor.logMemoryUsage();

// For√ßar garbage collection
console.log('\nüßπ Executando garbage collection...');
const success = memoryMonitor.forceGarbageCollection();

if (success) {
  console.log('üìä Mem√≥ria ap√≥s garbage collection:');
  memoryMonitor.logMemoryUsage();
}

// Limpar refer√™ncia
largeArray.length = 0;
largeArray.splice(0, largeArray.length);

console.log('\nüìä Mem√≥ria ap√≥s limpar refer√™ncias:');
memoryMonitor.logMemoryUsage();

// For√ßar garbage collection novamente
console.log('\nüßπ Executando garbage collection final...');
memoryMonitor.forceGarbageCollection();

console.log('\nüìä Status final da mem√≥ria:');
memoryMonitor.logMemoryUsage();

console.log('\n‚úÖ Teste de mem√≥ria conclu√≠do!');
